Índice:
- .env (linhas 1-11)
- .env.local (linhas 12-24)
- .gitignore (linhas 25-70)
- .vscode\settings.json (linhas 71-77)
- README.md (linhas 78-116)
- arquivao.py (linhas 117-211)
- components.json (linhas 212-236)
- eslint.config.mjs (linhas 237-264)
- next-env.d.ts (linhas 265-273)
- next.config.ts (linhas 274-283)
- package.json (linhas 284-327)
- postcss.config.mjs (linhas 328-335)
- prisma\migrations\20250908205611_add_credits\migration.sql (linhas 336-397)
- prisma\migrations\migration_lock.toml (linhas 398-403)
- prisma\schema.prisma (linhas 404-486)
- public\file.svg (linhas 487-490)
- public\globe.svg (linhas 491-494)
- public\next.svg (linhas 495-498)
- public\vercel.svg (linhas 499-502)
- public\window.svg (linhas 503-506)
- src\app\api\auth\route.js (linhas 507-510)
- src\app\auth\callback\page.tsx (linhas 511-560)
- src\app\auth\page.tsx (linhas 561-581)
- src\app\criar-musica\page.tsx (linhas 582-995)
- src\app\dashboard\page.tsx (linhas 996-1069)
- src\app\favicon.ico (linhas 1070-1073)
- src\app\globals.css (linhas 1074-1198)
- src\app\layout.tsx (linhas 1199-1222)
- src\app\page.tsx (linhas 1223-1247)
- src\components\auth\AuthForm.tsx (linhas 1248-1424)
- src\components\landing\BenefitsSection.tsx (linhas 1425-1514)
- src\components\landing\Footer.tsx (linhas 1515-1567)
- src\components\landing\Header.tsx (linhas 1568-1618)
- src\components\landing\HeroSection.tsx (linhas 1619-1711)
- src\components\landing\HowItWorksSection.tsx (linhas 1712-1772)
- src\components\landing\PricingSection.tsx (linhas 1773-1882)
- src\lib\auth.ts (linhas 1883-1979)
- src\lib\logger.ts (linhas 1980-1991)
- src\lib\supabase\client.ts (linhas 1992-2007)
- src\lib\utils.ts (linhas 2008-2016)
- src\lib\utils\cn.ts (linhas 2017-2026)
- src\lib\utils\useIsMobile.ts (linhas 2027-2045)
- src\lib\utils\useToast.ts (linhas 2046-2143)
- src\types\supabase.ts (linhas 2144-2147)
- tailwind.config.ts (linhas 2148-2187)
- tsconfig.json (linhas 2188-2232)


<DOCUMENT filename=".env">

NEXT_PUBLIC_SUPABASE_URL=https://jzdrpqvuipnqswwvevkg.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp6ZHJwcXZ1aXBucXN3d3ZldmtnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTcyOTcxODUsImV4cCI6MjA3Mjg3MzE4NX0.s1GzgxhgBFyeK44mobRYJEDLtOMELvlEkAdnQtOm1Y0

    # Connect to Supabase via connection pooling
DATABASE_URL="postgresql://postgres.jzdrpqvuipnqswwvevkg:Gidarocha!22@aws-1-sa-east-1.pooler.supabase.com:6543/postgres?pgbouncer=true"
DIRECT_URL="postgresql://postgres.jzdrpqvuipnqswwvevkg:Gidarocha!22@aws-1-sa-east-1.pooler.supabase.com:5432/postgres"
        

</DOCUMENT>

<DOCUMENT filename=".env.local">
NEXT_PUBLIC_SUPABASE_URL=https://jzdrpqvuipnqswwvevkg.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp6ZHJwcXZ1aXBucXN3d3ZldmtnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTcyOTcxODUsImV4cCI6MjA3Mjg3MzE4NX0.s1GzgxhgBFyeK44mobRYJEDLtOMELvlEkAdnQtOm1Y0

    # Connect to Supabase via connection pooling
DATABASE_URL="postgresql://postgres.jzdrpqvuipnqswwvevkg:Gidarocha!22@aws-1-sa-east-1.pooler.supabase.com:6543/postgres?pgbouncer=true"
DIRECT_URL="postgresql://postgres.jzdrpqvuipnqswwvevkg:Gidarocha!22@aws-1-sa-east-1.pooler.supabase.com:5432/postgres"
    


        

</DOCUMENT>

<DOCUMENT filename=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

/src/generated/prisma

</DOCUMENT>

<DOCUMENT filename=".vscode\settings.json">
{
    "WillLuke.nextjs.addTypesOnSave": true,
    "WillLuke.nextjs.hasPrompted": true
}
</DOCUMENT>

<DOCUMENT filename="README.md">
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

</DOCUMENT>

<DOCUMENT filename="arquivao.py">
import os

IGNORED_DIRS = {
    "node_modules",
    ".next",
    ".git",
    ".vercel",
    ".turbo",
    "__pycache__",
}
IGNORED_FILES = {
    "package-lock.json",
    "yarn.lock",
    "pnpm-lock.yaml",
    ".DS_Store",
}

OUTPUT_FILE = "PROJETO_ARQUIVAO.txt"


def should_ignore(path: str, is_dir: bool) -> bool:
    """Retorna True se o arquivo/pasta deve ser ignorado."""
    name = os.path.basename(path)
    if is_dir and name in IGNORED_DIRS:
        return True
    if not is_dir and name in IGNORED_FILES:
        return True
    return False


def collect_files(root_dir: str):
    """Percorre diretórios e retorna lista de arquivos válidos."""
    collected = []
    for dirpath, dirnames, filenames in os.walk(root_dir):
        dirnames[:] = [d for d in dirnames if not should_ignore(os.path.join(dirpath, d), True)]
        for f in filenames:
            file_path = os.path.join(dirpath, f)
            if should_ignore(file_path, False):
                continue
            collected.append(file_path)
    return collected


def write_archivao(files, output_file):
    """Escreve todos os arquivos no arquivão TXT, com índice no topo."""
    index_entries = []
    line_count = 0

    # usamos um temporário para depois injetar o índice no topo
    temp_file = output_file + ".tmp"

    with open(temp_file, "w", encoding="utf-8") as out:
        for file_path in files:
            rel_path = os.path.relpath(file_path, ".")
            start_line = line_count + 1
            out.write(f"<DOCUMENT filename=\"{rel_path}\">\n")
            line_count += 1

            try:
                with open(file_path, "r", encoding="utf-8") as f:
                    for line in f:
                        out.write(line)
                        line_count += 1
            except Exception as e:
                err_msg = f"### ERRO AO LER ARQUIVO: {e}\n"
                out.write(err_msg)
                line_count += 1

            out.write("\n</DOCUMENT>\n\n")
            line_count += 2  # duas que adicionamos
            end_line = line_count

            index_entries.append((rel_path, start_line, end_line))

    # agora escreve o índice + conteúdo real no arquivo final
    with open(output_file, "w", encoding="utf-8") as final:
        final.write("Índice:\n")
        for (path, start, end) in index_entries:
            final.write(f"- {path} (linhas {start}-{end})\n")
        final.write("\n\n")
        with open(temp_file, "r", encoding="utf-8") as tmp:
            final.write(tmp.read())

    os.remove(temp_file)
    print(f"✅ Arquivão gerado com índice: {output_file}")


if __name__ == "__main__":
    root_dir = "."
    files = collect_files(root_dir)
    files.sort()
    write_archivao(files, OUTPUT_FILE)

</DOCUMENT>

<DOCUMENT filename="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/app/globals.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "iconLibrary": "lucide",
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "registries": {}
}

</DOCUMENT>

<DOCUMENT filename="eslint.config.mjs">
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
  {
    ignores: [
      "node_modules/**",
      ".next/**",
      "out/**",
      "build/**",
      "next-env.d.ts",
    ],
  },
];

export default eslintConfig;

</DOCUMENT>

<DOCUMENT filename="next-env.d.ts">
/// <reference types="next" />
/// <reference types="next/image-types/global" />
/// <reference path="./.next/types/routes.d.ts" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.

</DOCUMENT>

<DOCUMENT filename="next.config.ts">
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;

</DOCUMENT>

<DOCUMENT filename="package.json">
{
  "name": "turuturu-app",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build --turbopack",
    "start": "next start",
    "lint": "eslint"
  },
  "dependencies": {
    "@hookform/resolvers": "^5.2.1",
    "@prisma/client": "^6.15.0",
    "@stripe/stripe-js": "^7.9.0",
    "@supabase/supabase-js": "^2.57.2",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "date-fns": "^4.1.0",
    "lucide-react": "^0.542.0",
    "next": "15.5.2",
    "react": "19.1.0",
    "react-dom": "19.1.0",
    "react-hook-form": "^7.62.0",
    "stripe": "^18.5.0",
    "tailwind-merge": "^3.3.1",
    "zod": "^4.1.5"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.5.2",
    "prisma": "^6.15.0",
    "tailwindcss": "^4",
    "tw-animate-css": "^1.3.8",
    "typescript": "^5"
  }
}

</DOCUMENT>

<DOCUMENT filename="postcss.config.mjs">
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;

</DOCUMENT>

<DOCUMENT filename="prisma\migrations\20250908205611_add_credits\migration.sql">
-- CreateEnum
CREATE TYPE "public"."OrderStatus" AS ENUM ('AWAITING_PAYMENT', 'PENDING', 'IN_PRODUCTION', 'COMPLETED', 'CANCELED');

-- CreateEnum
CREATE TYPE "public"."PaymentStatus" AS ENUM ('PENDING', 'PAID', 'FAILED');

-- CreateTable
CREATE TABLE "public"."Profile" (
    "id" UUID NOT NULL,
    "email" TEXT NOT NULL,
    "name" TEXT,
    "isAdmin" BOOLEAN NOT NULL DEFAULT false,
    "credits" INTEGER NOT NULL DEFAULT 0,

    CONSTRAINT "Profile_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "public"."Order" (
    "id" UUID NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,
    "updatedBy" UUID,
    "prompt" TEXT NOT NULL,
    "status" "public"."OrderStatus" NOT NULL DEFAULT 'AWAITING_PAYMENT',
    "paymentStatus" "public"."PaymentStatus" NOT NULL DEFAULT 'PENDING',
    "customerId" UUID NOT NULL,

    CONSTRAINT "Order_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "public"."MusicFile" (
    "id" UUID NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedBy" UUID,
    "url" TEXT NOT NULL,
    "orderId" UUID NOT NULL,

    CONSTRAINT "MusicFile_pkey" PRIMARY KEY ("id")
);

-- CreateIndex
CREATE UNIQUE INDEX "Profile_email_key" ON "public"."Profile"("email");

-- CreateIndex
CREATE INDEX "Order_customerId_idx" ON "public"."Order"("customerId");

-- CreateIndex
CREATE UNIQUE INDEX "MusicFile_orderId_key" ON "public"."MusicFile"("orderId");

-- CreateIndex
CREATE INDEX "MusicFile_orderId_idx" ON "public"."MusicFile"("orderId");

-- AddForeignKey
ALTER TABLE "public"."Order" ADD CONSTRAINT "Order_customerId_fkey" FOREIGN KEY ("customerId") REFERENCES "public"."Profile"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "public"."MusicFile" ADD CONSTRAINT "MusicFile_orderId_fkey" FOREIGN KEY ("orderId") REFERENCES "public"."Order"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

</DOCUMENT>

<DOCUMENT filename="prisma\migrations\migration_lock.toml">
# Please do not edit this file manually
# It should be added in your version-control system (e.g., Git)
provider = "postgresql"

</DOCUMENT>

<DOCUMENT filename="prisma\schema.prisma">
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ----------------------------------------------------
// ENUMS
// Definem estados fixos para o sistema.
// ----------------------------------------------------

/// Status do pedido em relação à produção da música.
enum OrderStatus {
  AWAITING_PAYMENT
  PENDING
  IN_PRODUCTION
  COMPLETED
  CANCELED
}

/// Status do pagamento, integrado ao fluxo do Stripe.
enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

// ----------------------------------------------------
// MODELS
// Representam as tabelas do banco de dados.
// ----------------------------------------------------

/// Perfil de usuário, ligado à tabela `auth.users` do Supabase via `id`.
/// RLS: Restringir acesso a `id = auth.uid()` para users; admins têm acesso total.
model Profile {
  id      String   @id @db.Uuid
  email   String   @unique
  name    String?
  isAdmin Boolean  @default(false)
  credits Int      @default(0) // Campo para créditos do usuário

  orders  Order[]
}

/// Pedido de música personalizada, associado a um cliente.
/// RLS: Restringir `customerId = auth.uid()` para users; admins acessam todos.
model Order {
  id            String       @id @default(uuid()) @db.Uuid
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  updatedBy     String?      @db.Uuid
  prompt        String       @db.Text
  status        OrderStatus  @default(AWAITING_PAYMENT)
  paymentStatus PaymentStatus @default(PENDING)

  customerId    String       @db.Uuid
  customer      Profile      @relation(fields: [customerId], references: [id])

  musicFile     MusicFile?

  @@index([customerId])
}

/// Arquivo de música finalizado, associado a um pedido (1:1 para MVP).
/// RLS: Apenas admins podem criar/atualizar; clientes acessam via `Order`.
model MusicFile {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedBy String?  @db.Uuid
  url       String

  orderId   String   @unique @db.Uuid
  order     Order    @relation(fields: [orderId], references: [id])

  @@index([orderId])
}
</DOCUMENT>

<DOCUMENT filename="public\file.svg">
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
</DOCUMENT>

<DOCUMENT filename="public\globe.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
</DOCUMENT>

<DOCUMENT filename="public\next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</DOCUMENT>

<DOCUMENT filename="public\vercel.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
</DOCUMENT>

<DOCUMENT filename="public\window.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
</DOCUMENT>

<DOCUMENT filename="src\app\api\auth\route.js">
// src\app\api\auth\route.js

</DOCUMENT>

<DOCUMENT filename="src\app\auth\callback\page.tsx">
  'use client';

  import { useEffect } from 'react';
  import { useRouter, useSearchParams } from 'next/navigation';
  import { supabase } from '@/lib/supabase/client';
  import { logger } from '@/lib/logger';
  import { useToast } from '@/lib/utils/useToast';

  export default function AuthCallback() {
    const router = useRouter();
    const searchParams = useSearchParams();
    const { toast } = useToast();

    useEffect(() => {
      async function handleCallback() {
        try {
          const { data, error } = await supabase.auth.getSession();
          if (error) {
            logger.error('Callback session error', { error: error.message });
            toast({ title: 'Erro', description: 'Falha ao autenticar. Tente novamente.' });
            router.push('/auth?error=Callback+failed');
            return;
          }
          if (data.session) {
            logger.info('Callback session successful', { user: data.session.user.email });
            toast({ title: 'Sucesso', description: 'Login realizado com sucesso!' });
            router.push('/dashboard');
          } else {
            logger.error('No session found in callback', { params: searchParams.toString() });
            toast({ title: 'Erro', description: 'Nenhuma sessão encontrada. Tente novamente.' });
            router.push('/auth?error=No+session');
          }
        } catch (err) {
          logger.error('Unexpected callback error', { error: String(err) });
          toast({ title: 'Erro', description: 'Erro inesperado. Tente novamente.' });
          router.push('/auth?error=Unexpected+error');
        }
      }
      handleCallback();
    }, [router, searchParams, toast]);

    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100">
        <p className="text-gray-500">Autenticando...</p>
      </div>
    );
  }
</DOCUMENT>

<DOCUMENT filename="src\app\auth\page.tsx">
import { AuthForm } from '@/components/auth/AuthForm';
import { Music } from 'lucide-react';

export default function AuthPage() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 to-pink-50 flex items-center justify-center px-6">
      <div className="bg-white rounded-lg shadow-md p-6 w-full max-w-md">
        <div className="text-center mb-8">
          <Music className="h-12 w-12 text-purple-600 mx-auto mb-4" />
          <h1 className="text-2xl font-bold text-gray-800">Turuturu</h1>
          <p className="text-gray-600 mt-2">Acesse sua conta</p>
        </div>
        
        <AuthForm />
      </div>
    </div>
  );
}
</DOCUMENT>

<DOCUMENT filename="src\app\criar-musica\page.tsx">
// src\app\criar-musica\page.tsx
'use client';

import { useState, useEffect } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { useRouter } from 'next/navigation';
import { supabase } from '@/lib/supabase/client';
import { logger } from '@/lib/logger';
import { useToast } from '@/lib/utils/useToast';
import { Music, Heart, Sparkles, Volume2, Star } from 'lucide-react';
import { Header } from '@/components/landing/Header';
import { Footer } from '@/components/landing/Footer';
import { Database } from '@/types/supabase';
import { PostgrestError } from '@supabase/supabase-js';

// Tipos locais para garantir compatibilidade
type ProfileRow = Database['public']['Tables']['Profile']['Row'];
type ProfileInsert = Database['public']['Tables']['Profile']['Insert'];
type ProfileUpdate = Database['public']['Tables']['Profile']['Update'];
type OrderInsert = Database['public']['Tables']['Order']['Insert'];

const formSchema = z.object({
  childName: z.string().min(2, 'Nome deve ter pelo menos 2 caracteres'),
  childNamePronunciation: z.string().optional(),
  theme: z.string().min(10, 'Descreva o tema com pelo menos 10 caracteres'),
  musicStyle: z.string().min(1, 'Selecione um estilo musical'),
  instruments: z.array(z.string()).min(1, 'Selecione pelo menos um instrumento'),
  effects: z.array(z.string()).min(1, 'Selecione pelo menos um efeito'),
  childAge: z.string().min(1, 'Selecione a idade da criança'),
  additionalInfo: z.string().optional(),
});

type FormData = z.infer<typeof formSchema>;

const musicStyles = [
  { value: 'aventura', label: '🏰 Aventura', color: 'bg-blue-500' },
  { value: 'ninar', label: '🌙 Ninar', color: 'bg-purple-500' },
  { value: 'escola', label: '🎒 Escola', color: 'bg-green-500' },
  { value: 'princesa', label: '👑 Princesa', color: 'bg-pink-500' },
  { value: 'super-heroi', label: '🦸 Super-Herói', color: 'bg-blue-500' },
  { value: 'natureza', label: '🌳 Natureza', color: 'bg-green-500' },
  { value: 'familia', label: '👨‍👩‍👧‍👦 Família', color: 'bg-purple-500' },
];

const instruments = [
  '🎹 Piano', '🎸 Violão', '🥁 Bateria', '🎺 Trompete',
  '🎻 Violino', '🪘 Xilofone', '🥄 Colheres', '🔔 Sinos',
  '🎷 Saxofone', '🪗 Sanfona', '🎤 Vocal', '🎵 Stillpan'
];

const soundEffects = [
  '😄 Risadas', '👏 Palmas', '🎵 Lálálá', '🤫 Shhhh',
  '🐦 Passarinhos', '🌊 Água', '🚗 Carrinhos', '🐱 Miados',
  '🐶 Latidos', '⭐ Efeitos Mágicos', '🎪 Circo', '🌈 Arco-íris'
];

export default function CreateMusic() {
  const { toast } = useToast();
  const router = useRouter();
  const [selectedInstruments, setSelectedInstruments] = useState<string[]>([]);
  const [selectedEffects, setSelectedEffects] = useState<string[]>([]);
  const [credits, setCredits] = useState<number>(0);
  const form = useForm<FormData>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      childName: '',
      childNamePronunciation: '',
      theme: '',
      musicStyle: '',
      instruments: [],
      effects: [],
      childAge: '',
      additionalInfo: '',
    },
  });

  useEffect(() => {
    async function checkUserAndCredits() {
      try {
        const { data: { user }, error: userError } = await supabase.auth.getUser();
        if (userError || !user) {
          logger.error('User not authenticated', { error: userError?.message });
          toast({ title: 'Erro', description: 'Você precisa estar logado.' });
          router.push('/auth?error=Unauthorized');
          return;
        }

        const { data: profile, error: profileError } = await supabase
          .from('Profile')
          .select('credits')
          .eq('id', user.id)
          .single() as { data: ProfileRow | null; error: PostgrestError | null };

        if (profileError || !profile) {
          logger.info('Profile not found, creating new profile', { userId: user.id });
          const profileData: ProfileInsert = {
            id: user.id,
            email: user.email || '',
            name: user.user_metadata?.name || user.email || '',
            isAdmin: false,
            credits: 0,
          };

          const { error: insertError } = await supabase
            .from('Profile')
            .insert([profileData]);

          if (insertError) {
            logger.error('Failed to create profile', { error: insertError.message });
            toast({ title: 'Erro', description: 'Falha ao criar perfil. Tente novamente.' });
            router.push('/auth?error=Profile+creation+failed');
            return;
          }

          const { data: newProfile, error: newProfileError } = await supabase
            .from('Profile')
            .select('credits')
            .eq('id', user.id)
            .single() as { data: ProfileRow | null; error: PostgrestError | null };

          if (newProfileError || !newProfile) {
            logger.error('Failed to fetch new profile', { error: newProfileError?.message });
            toast({ title: 'Erro', description: 'Não foi possível carregar créditos.' });
            router.push('/auth?error=Profile+fetch+failed');
            return;
          }

          setCredits(newProfile.credits);
          logger.info('Credits fetched successfully', { userId: user.id, credits: newProfile.credits });
        } else {
          setCredits(profile.credits);
          logger.info('Credits fetched successfully', { userId: user.id, credits: profile.credits });
        }
      } catch (err) {
        logger.error('Unexpected error in checkUserAndCredits', { error: String(err) });
        toast({ title: 'Erro', description: 'Erro inesperado. Tente novamente.' });
        router.push('/auth?error=Unexpected+error');
      }
    }
    checkUserAndCredits();
  }, [router, toast]);

  const toggleInstrument = (instrument: string) => {
    const updated = selectedInstruments.includes(instrument)
      ? selectedInstruments.filter((i) => i !== instrument)
      : [...selectedInstruments, instrument];
    setSelectedInstruments(updated);
    form.setValue('instruments', updated);
  };

  const toggleEffect = (effect: string) => {
    const updated = selectedEffects.includes(effect)
      ? selectedEffects.filter((e) => e !== effect)
      : [...selectedEffects, effect];
    setSelectedEffects(updated);
    form.setValue('effects', updated);
  };

  const onSubmit = async (data: FormData) => {
    try {
      if (credits < 1) {
        logger.error('Insufficient credits', { email: (await supabase.auth.getUser()).data.user?.email });
        toast({ title: 'Erro', description: 'Você precisa de pelo menos 1 crédito para criar uma música.' });
        router.push('/precos');
        return;
      }

      const { data: { user }, error: userError } = await supabase.auth.getUser();
      if (userError || !user) {
        logger.error('User not authenticated on submit', { error: userError?.message });
        toast({ title: 'Erro', description: 'Você precisa estar logado.' });
        router.push('/auth');
        return;
      }

      const prompt = `Nome: ${data.childName} (pronúncia: ${data.childNamePronunciation || 'não especificado'})
Tema: ${data.theme}
Instrumentos: ${data.instruments.join(', ')}
Efeitos: ${data.effects.join(', ')}
Estilo: ${data.musicStyle}
Idade: ${data.childAge}
Observação: ${data.additionalInfo || 'nenhuma'}`;

      const orderData: OrderInsert = {
        id: crypto.randomUUID(), // UUID gerado pelo cliente
        updatedAt: new Date().toISOString(), // será sobrescrito pelo banco
        customerId: user.id,
        prompt,
        status: 'AWAITING_PAYMENT',
        paymentStatus: 'PENDING',
      };


      const { error } = await supabase
        .from('Order')
        .insert([orderData]);

      if (error) {
        logger.error('Failed to create order', { error: error.message });
        toast({ title: 'Erro', description: 'Falha ao criar pedido. Tente novamente.' });
        return;
      }

      const updateData: ProfileUpdate = {
        credits: credits - 1,
      };

      const { error: creditsError } = await supabase
        .from('Profile')
        .update(updateData)
        .eq('id', user.id);

      if (creditsError) {
        logger.error('Failed to update credits', { error: creditsError.message });
        toast({ title: 'Erro', description: 'Falha ao atualizar créditos. Tente novamente.' });
        return;
      }

      logger.info('Order created successfully', { email: user.email, prompt });
      toast({ title: 'Sucesso', description: 'Música encomendada! Você será redirecionado.' });
      router.push('/dashboard');
    } catch (err) {
      logger.error('Unexpected error on submit', { error: String(err) });
      toast({ title: 'Erro', description: 'Erro inesperado. Tente novamente.' });
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-blue-100 to-purple-100">
      <Header />
      <main className="container mx-auto px-4 py-12">
        <div className="max-w-4xl mx-auto">
          <div className="text-center mb-12">
            <div className="flex items-center justify-center gap-2 mb-4">
              <Music className="w-8 h-8 text-blue-500" />
              <Sparkles className="w-6 h-6 text-purple-500 animate-pulse" />
              <Heart className="w-6 h-6 text-pink-500 animate-bounce" />
            </div>
            <h1 className="text-4xl md:text-5xl font-bold text-gray-900 mb-4">
              Crie uma Música Especial
            </h1>
            <p className="text-lg text-gray-600 max-w-2xl mx-auto">
              Transforme seu pequeno no protagonista de uma canção única e inesquecível
            </p>
            <p className="text-sm text-gray-500 mt-2">Créditos disponíveis: {credits}</p>
          </div>
          <div className="bg-white/90 backdrop-blur-sm shadow-lg rounded-lg border-0">
            <div className="p-6 text-center">
              <h2 className="text-2xl font-bold text-gray-900 flex items-center justify-center gap-2">
                <Star className="w-6 h-6 text-purple-500" />
                Formulário de Criação
              </h2>
              <p className="text-gray-600">Preencha os dados abaixo para criarmos uma música personalizada</p>
            </div>
            <div className="p-6">
              <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
                <div className="space-y-6">
                  <h3 className="text-xl font-semibold text-gray-900 border-b-2 border-purple-200 pb-2">
                    📝 Informações da Criança
                  </h3>
                  <div className="grid md:grid-cols-2 gap-6">
                    <div>
                      <label className="block text-sm font-medium text-gray-700">Nome da Criança</label>
                      <input
                        {...form.register('childName')}
                        className="mt-2 w-full rounded-md border border-gray-300 p-3 focus:border-blue-500"
                        placeholder="Ex: Ana Clara, João Pedro..."
                      />
                      {form.formState.errors.childName && (
                        <p className="text-sm text-red-500 mt-1">{form.formState.errors.childName.message}</p>
                      )}
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700">Como se Pronuncia?</label>
                      <input
                        {...form.register('childNamePronunciation')}
                        className="mt-2 w-full rounded-md border border-gray-300 p-3 focus:border-blue-500"
                        placeholder="Ex: Zion → Záion, Liv → Líve"
                      />
                      <p className="text-sm text-gray-500 mt-1">Opcional: Ajude-nos com a pronúncia correta</p>
                    </div>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700">Idade da Criança</label>
                    <select
                      {...form.register('childAge')}
                      className="mt-2 w-full rounded-md border border-gray-300 p-3 focus:border-blue-500"
                    >
                      <option value="">Selecione a idade</option>
                      <option value="0-1">0-1 anos</option>
                      <option value="2-3">2-3 anos</option>
                      <option value="4-5">4-5 anos</option>
                      <option value="6-7">6-7 anos</option>
                    </select>
                    {form.formState.errors.childAge && (
                      <p className="text-sm text-red-500 mt-1">{form.formState.errors.childAge.message}</p>
                    )}
                  </div>
                </div>
                <div className="space-y-6">
                  <h3 className="text-xl font-semibold text-gray-900 border-b-2 border-purple-200 pb-2">
                    🎭 Tema da Música
                  </h3>
                  <div>
                    <label className="block text-sm font-medium text-gray-700">Descreva o Tema</label>
                    <textarea
                      {...form.register('theme')}
                      className="mt-2 w-full rounded-md border border-gray-300 p-3 focus:border-blue-500 min-h-[100px]"
                      placeholder="Ex: Uma aventura no espaço onde a criança é uma astronauta corajosa que explora planetas coloridos..."
                    />
                    <p className="text-sm text-gray-500 mt-1">Seja criativo! Conte-nos sobre a história que você imagina</p>
                    {form.formState.errors.theme && (
                      <p className="text-sm text-red-500 mt-1">{form.formState.errors.theme.message}</p>
                    )}
                  </div>
                </div>
                <div className="space-y-6">
                  <h3 className="text-xl font-semibold text-gray-900 border-b-2 border-purple-200 pb-2">
                    🎨 Estilo Musical
                  </h3>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                    {musicStyles.map((style) => (
                      <div
                        key={style.value}
                        className={`cursor-pointer p-4 rounded-lg border-2 ${form.watch('musicStyle') === style.value ? `${style.color} text-white` : 'border-gray-200 hover:border-blue-300'}`}
                        onClick={() => form.setValue('musicStyle', style.value)}
                      >
                        <div className="text-lg font-medium text-center">{style.label}</div>
                      </div>
                    ))}
                  </div>
                  {form.formState.errors.musicStyle && (
                    <p className="text-sm text-red-500 mt-1">{form.formState.errors.musicStyle.message}</p>
                  )}
                </div>
                <div className="space-y-6">
                  <h3 className="text-xl font-semibold text-gray-900 border-b-2 border-purple-200 pb-2">
                    🎼 Instrumentos Musicais
                  </h3>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                    {instruments.map((instrument) => (
                      <div
                        key={instrument}
                        className={`cursor-pointer p-3 rounded-lg border-2 text-center ${selectedInstruments.includes(instrument) ? 'bg-blue-500 text-white' : 'border-gray-200 hover:bg-blue-50'}`}
                        onClick={() => toggleInstrument(instrument)}
                      >
                        {instrument}
                      </div>
                    ))}
                  </div>
                  {form.formState.errors.instruments && (
                    <p className="text-sm text-red-500 mt-1">{form.formState.errors.instruments.message}</p>
                  )}
                </div>
                <div className="space-y-6">
                  <h3 className="text-xl font-semibold text-gray-900 border-b-2 border-purple-200 pb-2">
                    🔊 Efeitos Sonoros
                  </h3>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                    {soundEffects.map((effect) => (
                      <div
                        key={effect}
                        className={`cursor-pointer p-3 rounded-lg border-2 text-center ${selectedEffects.includes(effect) ? 'bg-green-500 text-white' : 'border-gray-200 hover:bg-green-50'}`}
                        onClick={() => toggleEffect(effect)}
                      >
                        {effect}
                      </div>
                    ))}
                  </div>
                  {form.formState.errors.effects && (
                    <p className="text-sm text-red-500 mt-1">{form.formState.errors.effects.message}</p>
                  )}
                </div>
                <div className="space-y-6">
                  <h3 className="text-xl font-semibold text-gray-900 border-b-2 border-purple-200 pb-2">
                    💭 Informações Extras
                  </h3>
                  <div>
                    <label className="block text-sm font-medium text-gray-700">Algo Mais?</label>
                    <textarea
                      {...form.register('additionalInfo')}
                      className="mt-2 w-full rounded-md border border-gray-300 p-3 focus:border-blue-500"
                      placeholder="Ex: A criança adora dinossauros, tem um cachorrinho chamado Rex, gosta de brincar no parque..."
                    />
                    <p className="text-sm text-gray-500 mt-1">Opcional: Conte-nos mais sobre os gostos e rotina da criança</p>
                  </div>
                </div>
                <div className="pt-6 border-t-2 border-gray-200">
                  <button
                    type="submit"
                    className="w-full md:w-auto mx-auto flex items-center gap-2 px-6 py-3 bg-gradient-to-r from-blue-500 to-purple-500 text-white rounded-lg hover:from-blue-600 hover:to-purple-600"
                  >
                    <Volume2 className="w-5 h-5" />
                    Criar Minha Música Personalizada
                    <Sparkles className="w-5 h-5" />
                  </button>
                  <p className="text-center text-gray-600 mt-4">
                    🎁 Sua música será criada com carinho e enviada em até 48 horas
                  </p>
                </div>
              </form>
            </div>
          </div>
        </div>
      </main>
      <Footer />
    </div>
  );
}
</DOCUMENT>

<DOCUMENT filename="src\app\dashboard\page.tsx">
// src\app\dashboard\page.tsx
'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { supabase } from '@/lib/supabase/client';
import { logger } from '@/lib/logger';
import type { User } from '@supabase/supabase-js';

export default function DashboardPage() {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const router = useRouter();

  useEffect(() => {
    async function checkUser() {
      try {
        const { data, error } = await supabase.auth.getUser();
        if (error) {
          logger.error('Failed to fetch user', { error: error.message });
          router.push('/auth?error=Unauthorized');
          return;
        }
        if (data.user) {
          logger.info('User loaded in dashboard', { email: data.user.email });
          setUser(data.user);
        } else {
          logger.error('No user found, redirecting to auth');
          router.push('/auth?error=No user');
        }
      } catch (err) {
        logger.error('Unexpected error in dashboard', { error: String(err) });
        router.push('/auth?error=Unexpected error');
      } finally {
        setLoading(false);
      }
    }
    checkUser();
  }, [router]);

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100">
        <p className="text-gray-500">Carregando...</p>
      </div>
    );
  }

  if (!user) {
    return null; // Redirecionamento será tratado pelo useEffect
  }

  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-gray-100">
      <div className="bg-white p-8 rounded-lg shadow-md w-full max-w-md">
        <h1 className="text-2xl font-bold text-center mb-4">Bem-vindo ao Turuturu!</h1>
        <p className="text-gray-700 text-center">Olá, {user.email}!</p>
        <p className="text-gray-500 text-center mt-2">Esta é sua área de usuário.</p>
        <button
          onClick={async () => {
            await supabase.auth.signOut();
            router.push('/auth');
          }}
          className="mt-4 w-full bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600"
        >
          Sair
        </button>
      </div>
    </div>
  );
}
</DOCUMENT>

<DOCUMENT filename="src\app\favicon.ico">
### ERRO AO LER ARQUIVO: 'utf-8' codec can't decode byte 0x96 in position 50: invalid start byte

</DOCUMENT>

<DOCUMENT filename="src\app\globals.css">
@import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
  --color-sidebar-ring: var(--sidebar-ring);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar: var(--sidebar);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}

:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.129 0.042 264.695);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.129 0.042 264.695);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.129 0.042 264.695);
  --primary: oklch(0.208 0.042 265.755);
  --primary-foreground: oklch(0.984 0.003 247.858);
  --secondary: oklch(0.968 0.007 247.896);
  --secondary-foreground: oklch(0.208 0.042 265.755);
  --muted: oklch(0.968 0.007 247.896);
  --muted-foreground: oklch(0.554 0.046 257.417);
  --accent: oklch(0.968 0.007 247.896);
  --accent-foreground: oklch(0.208 0.042 265.755);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.929 0.013 255.508);
  --input: oklch(0.929 0.013 255.508);
  --ring: oklch(0.704 0.04 256.788);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.984 0.003 247.858);
  --sidebar-foreground: oklch(0.129 0.042 264.695);
  --sidebar-primary: oklch(0.208 0.042 265.755);
  --sidebar-primary-foreground: oklch(0.984 0.003 247.858);
  --sidebar-accent: oklch(0.968 0.007 247.896);
  --sidebar-accent-foreground: oklch(0.208 0.042 265.755);
  --sidebar-border: oklch(0.929 0.013 255.508);
  --sidebar-ring: oklch(0.704 0.04 256.788);
}

.dark {
  --background: oklch(0.129 0.042 264.695);
  --foreground: oklch(0.984 0.003 247.858);
  --card: oklch(0.208 0.042 265.755);
  --card-foreground: oklch(0.984 0.003 247.858);
  --popover: oklch(0.208 0.042 265.755);
  --popover-foreground: oklch(0.984 0.003 247.858);
  --primary: oklch(0.929 0.013 255.508);
  --primary-foreground: oklch(0.208 0.042 265.755);
  --secondary: oklch(0.279 0.041 260.031);
  --secondary-foreground: oklch(0.984 0.003 247.858);
  --muted: oklch(0.279 0.041 260.031);
  --muted-foreground: oklch(0.704 0.04 256.788);
  --accent: oklch(0.279 0.041 260.031);
  --accent-foreground: oklch(0.984 0.003 247.858);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.551 0.027 264.364);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.208 0.042 265.755);
  --sidebar-foreground: oklch(0.984 0.003 247.858);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.984 0.003 247.858);
  --sidebar-accent: oklch(0.279 0.041 260.031);
  --sidebar-accent-foreground: oklch(0.984 0.003 247.858);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.551 0.027 264.364);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}

</DOCUMENT>

<DOCUMENT filename="src\app\layout.tsx">
import './globals.css';
import Head from 'next/head';

export const metadata = {
  title: 'Turuturu',
  description: 'Canções infantis personalizadas',
};

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="pt-BR">
      <Head>
        <link
          href="https://fonts.googleapis.com/css2?family=Comic+Neue:wght@400;700&display=swap"
          rel="stylesheet"
        />
      </Head>
      <body className="font-comic">{children}</body>
    </html>
  );
}
</DOCUMENT>

<DOCUMENT filename="src\app\page.tsx">
// src\app\page.tsx
import { Header } from '@/components/landing/Header';
import { HeroSection } from '@/components/landing/HeroSection';
import { HowItWorksSection } from '@/components/landing/HowItWorksSection';
import { PricingSection } from '@/components/landing/PricingSection';
import { BenefitsSection } from '@/components/landing/BenefitsSection';
import { Footer } from '@/components/landing/Footer';

export default function HomePage() {
  return (
    <div className="min-h-screen bg-white">
      <Header />
      <main>
        <HeroSection />
        <HowItWorksSection />
        <PricingSection />
        <BenefitsSection />
      </main>
      <Footer />
    </div>
  );
}
</DOCUMENT>

<DOCUMENT filename="src\components\auth\AuthForm.tsx">
// src/components/auth/AuthForm.tsx
'use client';

import { useState } from 'react';
import { signUp, signIn, signInWithGoogle } from '@/lib/auth';
import { logger } from '@/lib/logger';

export function AuthForm() {
  const [isLogin, setIsLogin] = useState(true);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [name, setName] = useState('');
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    setLoading(true);

    try {
      const { user, error } = isLogin
        ? await signIn(email, password)
        : await signUp(email, password, name);

      if (error) {
        setError(error);
        logger.error(`${isLogin ? 'Login' : 'Signup'} failed`, { email, error });
      } else if (user) {
        logger.info(`${isLogin ? 'Login' : 'Signup'} successful`, { email });
        window.location.href = '/dashboard';
      }
    } catch (err) {
      const errorMsg = 'Erro inesperado. Tente novamente.';
      setError(errorMsg);
      logger.error('Unexpected auth error', { error: String(err) });
    } finally {
      setLoading(false);
    }
  };

  const handleGoogleSignIn = async () => {
    setError(null);
    setLoading(true);

    try {
      const { error } = await signInWithGoogle();
      if (error) {
        setError(error);
        logger.error('Google sign-in failed', { error });
      }
    } catch (err) {
      const errorMsg = 'Erro ao logar com Google. Tente novamente.';
      setError(errorMsg);
      logger.error('Unexpected Google auth error', { error: String(err) });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div>
      {/* Tabs Login/Cadastro */}
      <div className="flex mb-6 bg-gray-100 rounded-lg p-1">
        <button
          className={`flex-1 py-2 px-4 rounded-md font-medium transition-colors ${
            isLogin 
              ? 'bg-white text-purple-600 shadow-sm' 
              : 'text-gray-600 hover:text-gray-800'
          }`}
          onClick={() => setIsLogin(true)}
        >
          Entrar
        </button>
        <button
          className={`flex-1 py-2 px-4 rounded-md font-medium transition-colors ${
            !isLogin 
              ? 'bg-white text-purple-600 shadow-sm' 
              : 'text-gray-600 hover:text-gray-800'
          }`}
          onClick={() => setIsLogin(false)}
        >
          Cadastrar
        </button>
      </div>

      {/* Formulário */}
      <div className="space-y-4">
        {!isLogin && (
          <div>
            <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-1">
              Nome Completo
            </label>
            <input
              id="name"
              type="text"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-colors"
              placeholder="Seu nome completo"
              required={!isLogin}
            />
          </div>
        )}
        
        <div>
          <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
            Email
          </label>
          <input
            id="email"
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-colors"
            placeholder="seu@email.com"
            required
          />
        </div>
        
        <div>
          <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-1">
            Senha
          </label>
          <input
            id="password"
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-colors"
            placeholder="••••••••"
            required
          />
        </div>

        {error && (
          <div className="bg-red-50 border border-red-200 rounded-lg p-3">
            <p className="text-red-600 text-sm">{error}</p>
          </div>
        )}

        <button
          onClick={handleSubmit}
          disabled={loading}
          className="w-full bg-purple-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-purple-700 disabled:bg-purple-300 disabled:cursor-not-allowed transition-colors"
        >
          {loading ? 'Carregando...' : isLogin ? 'Entrar' : 'Criar Conta'}
        </button>
      </div>

      {/* Divisor */}
      <div className="my-6 flex items-center">
        <div className="flex-1 border-t border-gray-200"></div>
        <span className="px-3 text-sm text-gray-500">ou</span>
        <div className="flex-1 border-t border-gray-200"></div>
      </div>

      {/* Login com Google */}
      <button
        onClick={handleGoogleSignIn}
        disabled={loading}
        className="w-full bg-white border border-gray-300 text-gray-700 py-3 px-4 rounded-lg font-medium hover:bg-gray-50 disabled:bg-gray-100 disabled:cursor-not-allowed transition-colors flex items-center justify-center gap-3"
      >
        <svg className="w-5 h-5" viewBox="0 0 24 24">
          <path
            fill="#4285F4"
            d="M12.545,10.239v3.821h5.445c-0.712,2.315-2.647,3.972-5.445,3.972c-3.332,0-6.033-2.701-6.033-6.032s2.701-6.032,6.033-6.032c1.498,0,2.866,0.549,3.921,1.453l2.814-2.814C17.503,2.988,15.139,2,12.545,2C7.021,2,2.543,6.477,2.543,12s4.478,10,10.002,10c8.396,0,10.249-7.85,9.426-11.748L12.545,10.239z"
          />
        </svg>
        {loading ? 'Carregando...' : 'Continuar com Google'}
      </button>
    </div>
  );
}
</DOCUMENT>

<DOCUMENT filename="src\components\landing\BenefitsSection.tsx">
// src\components\landing\BenefitsSection.tsx
import { Brain, Heart, Mic, Users } from 'lucide-react';

const benefits = [
  {
    icon: Brain,
    title: 'Desenvolvimento Cognitivo',
    description: 'Estimula áreas do cérebro responsáveis pela linguagem, memória e criatividade através da personalização musical.',
  },
  {
    icon: Heart,
    title: 'Fortalece Autoestima',
    description: 'Ser protagonista da própria música aumenta a confiança e o senso de identidade da criança.',
  },
  {
    icon: Mic,
    title: 'Estímulo à Linguagem',
    description: 'Músicas personalizadas aceleram o desenvolvimento da fala e vocabulário de forma natural e divertida.',
  },
  {
    icon: Users,
    title: 'Vínculo Familiar',
    description: 'Momentos de escuta compartilhada fortalecem os laços afetivos entre pais e filhos.',
  },
];

export function BenefitsSection() {
  return (
    <section id="beneficios" className="py-20 px-4 bg-gradient-to-b from-blue-50 to-purple-50">
      <div className="container mx-auto max-w-6xl">
        <div className="text-center mb-16">
          <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
            Por que funciona?
          </h2>
          <p className="text-lg text-gray-600 max-w-3xl mx-auto">
            Baseado em estudos de neurociência infantil, o protagonismo musical acelera o desenvolvimento cognitivo e emocional das crianças de 0 a 7 anos
          </p>
        </div>
        <div className="grid lg:grid-cols-2 gap-12 items-center">
          <div>
            <div className="relative mb-8">
              <svg className="w-full max-w-md mx-auto h-auto" viewBox="0 0 200 200" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M100 50c-27.6 0-50 22.4-50 50s22.4 50 50 50 50-22.4 50-50-22.4-50-50-50zm0 20c16.6 0 30 13.4 30 30s-13.4 30-30 30-30-13.4-30-30 13.4-30 30-30z" fill="url(#grad)" />
                <defs>
                  <linearGradient id="grad" x1="0" x2="1">
                    <stop offset="0" stopColor="#c7f9ff" />
                    <stop offset="1" stopColor="#ffd1dc" />
                  </linearGradient>
                </defs>
              </svg>
              <div className="absolute -top-4 -right-4 w-16 h-16 bg-blue-200/20 rounded-full blur-lg"></div>
              <div className="absolute -bottom-4 -left-4 w-12 h-12 bg-pink-200/20 rounded-full blur-lg"></div>
            </div>
            <div className="text-center lg:text-left">
              <h3 className="text-xl font-semibold text-gray-900 mb-4">
                &quot;A música personalizada cria conexões neurais únicas&quot;
              </h3>
              <p className="text-gray-600">
                Pesquisas mostram que quando a criança ouve seu próprio nome e elementos familiares em uma música, múltiplas áreas do cérebro são ativadas, potencializando aprendizado e desenvolvimento emocional.
              </p>
            </div>
          </div>
          <div className="grid sm:grid-cols-2 gap-6">
            {benefits.map((benefit, index) => (
              <div key={index} className="p-6 bg-white rounded-lg shadow border border-gray-100">
                <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-500 rounded-lg flex items-center justify-center mb-4">
                  <benefit.icon className="w-6 h-6 text-white" />
                </div>
                <h3 className="font-semibold text-gray-900 mb-3">{benefit.title}</h3>
                <p className="text-sm text-gray-600 leading-relaxed">{benefit.description}</p>
              </div>
            ))}
          </div>
        </div>
        <div className="text-center mt-16">
          <div className="inline-block p-6 bg-white border border-blue-200/20 rounded-lg">
            <p className="text-sm text-gray-900 font-medium">
              🧠 <strong>Pesquisa comprova:</strong> Crianças expostas a músicas personalizadas apresentam
              <span className="text-blue-500 font-semibold"> 40% mais desenvolvimento </span>
              na linguagem comparado a músicas genéricas
            </p>
          </div>
        </div>
      </div>
    </section>
  );
}
</DOCUMENT>

<DOCUMENT filename="src\components\landing\Footer.tsx">
// src\components\landing\Footer.tsx
import { Music } from 'lucide-react';

export function Footer() {
  return (
    <footer className="bg-gray-900 text-white py-16 px-4">
      <div className="container mx-auto max-w-6xl">
        <div className="grid md:grid-cols-4 gap-8">
          <div className="md:col-span-2">
            <div className="flex items-center gap-2 mb-4">
              <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-500 rounded-lg flex items-center justify-center">
                <Music className="w-5 h-5 text-white" />
              </div>
              <h3 className="text-lg font-bold">Turuturu</h3>
            </div>
            <p className="text-gray-300 text-sm mb-6 max-w-md">
              Transformando crianças em protagonistas de suas próprias músicas. Desenvolvimento infantil através da magia da música personalizada.
            </p>
            <div className="text-xs text-gray-400">
              © {new Date().getFullYear()} Turuturu. Todos os direitos reservados.
            </div>
          </div>
          <div>
            <h4 className="font-semibold mb-4">Produto</h4>
            <ul className="space-y-2 text-sm text-gray-300">
              <li><a href="#como-funciona" className="hover:text-white">Como Funciona</a></li>
              <li><a href="#precos" className="hover:text-white">Preços</a></li>
              <li><a href="#beneficios" className="hover:text-white">Benefícios</a></li>
              <li><a href="/contact" className="hover:text-white">Contato</a></li>
            </ul>
          </div>
          <div>
            <h4 className="font-semibold mb-4">Suporte</h4>
            <ul className="space-y-2 text-sm text-gray-300">
              <li><a href="/contact" className="hover:text-white">Central de Ajuda</a></li>
              <li><a href="/contact" className="hover:text-white">Contato</a></li>
              <li><a href="/terms" className="hover:text-white">Termos de Uso</a></li>
              <li><a href="/privacy" className="hover:text-white">Privacidade</a></li>
            </ul>
          </div>
        </div>
        <div className="border-t border-gray-700 mt-12 pt-8 text-center">
          <p className="text-xs text-gray-400">
            Desenvolvido com 💜 para famílias que acreditam no poder da música personalizada
          </p>
        </div>
      </div>
    </footer>
  );
}
</DOCUMENT>

<DOCUMENT filename="src\components\landing\Header.tsx">
// src\components\landing\Header.tsx
'use client';

import Link from 'next/link';
import { Music } from 'lucide-react';
import { logger } from '@/lib/logger';

export function Header() {
  const handleNavClick = (section: string) => {
    logger.info('Header nav clicked', { section });
  };

  return (
    <header className="bg-white/95 backdrop-blur-sm border-b border-gray-200 sticky top-0 z-50">
      <div className="container mx-auto px-4 py-4 flex items-center justify-between">
        <div className="flex items-center gap-2">
          <div className="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-500 rounded-lg flex items-center justify-center">
            <Music className="w-6 h-6 text-white" />
          </div>
          <h1 className="text-xl font-bold text-gray-900">Turuturu</h1>
        </div>
        <nav className="hidden md:flex items-center gap-6">
          <Link href="#como-funciona" onClick={() => handleNavClick('Como Funciona')} className="text-gray-600 hover:text-gray-900">
            Como Funciona
          </Link>
          <Link href="#precos" onClick={() => handleNavClick('Preços')} className="text-gray-600 hover:text-gray-900">
            Preços
          </Link>
          <Link href="#beneficios" onClick={() => handleNavClick('Benefícios')} className="text-gray-600 hover:text-gray-900">
            Benefícios
          </Link>
        </nav>
        <div className="flex items-center gap-3">
          <Link href="/auth" className="hidden sm:inline-flex px-4 py-2 text-gray-600 hover:text-gray-900">
            Entrar
          </Link>
          <Link
            href="/auth"
            onClick={() => handleNavClick('Criar Música')}
            className="px-4 py-2 bg-gradient-to-r from-blue-500 to-purple-500 text-white rounded-lg hover:from-blue-600 hover:to-purple-600"
          >
            Criar Música
          </Link>
        </div>
      </div>
    </header>
  );
}
</DOCUMENT>

<DOCUMENT filename="src\components\landing\HeroSection.tsx">
'use client';

import Link from 'next/link';
import { PlayCircle, Heart, Star } from 'lucide-react';
import { logger } from '@/lib/logger';
import { useToast } from '@/lib/utils/useToast';

export function HeroSection() {
  const { toast } = useToast();
  const handleCTAClick = (action: string) => {
    logger.info('Hero CTA clicked', { action });
  };
  const handleTestToast = () => {
    toast({ title: 'Teste', description: 'Toast funcionando!' });
    logger.info('Test toast triggered');
  };

  return (
    <section className="bg-gradient-to-br from-blue-100 to-purple-100 py-20 px-4">
      <div className="container mx-auto max-w-6xl">
        <div className="grid lg:grid-cols-2 gap-12 items-center">
          <div className="text-center lg:text-left">
            <div className="inline-flex items-center gap-2 bg-white/10 backdrop-blur-sm px-4 py-2 rounded-full mb-6">
              <Star className="w-4 h-4 text-blue-500" />
              <span className="text-sm font-medium text-gray-900">
                Baseado na neurociência infantil
              </span>
            </div>
            <h1 className="text-4xl md:text-6xl font-bold text-gray-900 mb-6 leading-tight">
              Transforme seu filho no
              <span className="bg-gradient-to-r from-blue-500 to-purple-500 bg-clip-text text-transparent"> protagonista </span>
              da música
            </h1>
            <p className="text-lg text-gray-600 mb-8 max-w-xl lg:max-w-none">
              Crie músicas infantis 100% personalizadas com nome, rotina e gostos. Uma experiência mágica que estimula autoestima, linguagem e criatividade.
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center lg:justify-start">
              <Link
                href="/auth"
                onClick={() => handleCTAClick('Criar Primeira Música')}
                className="group flex items-center gap-2 px-6 py-3 bg-gradient-to-r from-blue-500 to-purple-500 text-white rounded-lg hover:from-blue-600 hover:to-purple-600"
              >
                <PlayCircle className="w-5 h-5 group-hover:scale-110 transition-transform" />
                Criar Primeira Música
              </Link>
              <Link
                href="#beneficios"
                onClick={() => handleCTAClick('Ver Exemplos')}
                className="flex items-center gap-2 px-6 py-3 bg-white/20 border border-gray-300 rounded-lg hover:bg-white/30"
              >
                <Heart className="w-5 h-5" />
                Ver Exemplos
              </Link>
              <button
                onClick={handleTestToast}
                className="px-6 py-3 bg-gray-500 text-white rounded-lg"
              >
                Testar Toast
              </button>
            </div>
            <div className="flex items-center justify-center lg:justify-start gap-6 mt-8 text-sm text-gray-600">
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                Entrega em 24h
              </div>
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                Garantia de satisfação
              </div>
            </div>
          </div>
          <div className="relative">
            <svg className="w-full max-w-md mx-auto h-auto" viewBox="0 0 200 200" fill="none" xmlns="http://www.w3.org/2000/svg">
              <circle cx="100" cy="100" r="80" fill="url(#grad)" />
              <path d="M100 60c-22 0-40 18-40 40s18 40 40 40 40-18 40-40-18-40-40-40zm0 10c16.6 0 30 13.4 30 30s-13.4 30-30 30-30-13.4-30-30 13.4-30 30-30z" fill="#FFF" />
              <defs>
                <linearGradient id="grad" x1="0" x2="1">
                  <stop offset="0" stopColor="#c7f9ff" />
                  <stop offset="1" stopColor="#ffd1dc" />
                </linearGradient>
              </defs>
            </svg>
            <div className="absolute -top-4 -right-4 w-20 h-20 bg-blue-200/20 rounded-full blur-lg"></div>
            <div className="absolute -bottom-4 -left-4 w-16 h-16 bg-pink-200/20 rounded-full blur-lg"></div>
          </div>
        </div>
      </div>
    </section>
  );
}
</DOCUMENT>

<DOCUMENT filename="src\components\landing\HowItWorksSection.tsx">
// src\components\landing\HowItWorksSection.tsx
import { UserPlus, Edit3, Music2, Download, Link } from 'lucide-react';

const steps = [
  { icon: UserPlus, title: '1. Cadastre-se', description: 'Crie sua conta gratuita em poucos segundos' },
  { icon: Edit3, title: '2. Personalize', description: 'Preencha o formulário com nome, gostos e rotina da criança' },
  { icon: Music2, title: '3. Criamos', description: 'Nossa equipe produz a música personalizada em até 24h' },
  { icon: Download, title: '4. Aproveite', description: 'Baixe e ouça quantas vezes quiser na sua biblioteca' },
];

export function HowItWorksSection() {
  return (
    <section id="como-funciona" className="py-20 px-4 bg-gray-100/30">
      <div className="container mx-auto max-w-6xl">
        <div className="text-center mb-16">
          <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
            Como funciona?
          </h2>
          <p className="text-lg text-gray-600 max-w-2xl mx-auto">
            Um processo simples e mágico para criar a música personalizada perfeita para seu filho
          </p>
        </div>
        <div className="grid lg:grid-cols-2 gap-12 items-center mb-16">
          <div className="order-2 lg:order-1">
            <svg className="w-full max-w-md mx-auto h-auto" viewBox="0 0 200 200" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M100 40c-33.2 0-60 26.8-60 60s26.8 60 60 60 60-26.8 60-60-26.8-60-60-60zm0 20c22.1 0 40 17.9 40 40s-17.9 40-40 40-40-17.9-40-40 17.9-40 40-40z" fill="url(#grad)" />
              <defs>
                <linearGradient id="grad" x1="0" x2="1">
                  <stop offset="0" stopColor="#ffd1dc" />
                  <stop offset="1" stopColor="#c7f9ff" />
                </linearGradient>
              </defs>
            </svg>
          </div>
          <div className="order-1 lg:order-2 grid sm:grid-cols-2 gap-6">
            {steps.map((step, index) => (
              <div key={index} className="p-6 bg-white rounded-lg shadow border border-gray-100">
                <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-500 rounded-lg flex items-center justify-center mb-4">
                  <step.icon className="w-6 h-6 text-white" />
                </div>
                <h3 className="font-semibold text-gray-900 mb-2">{step.title}</h3>
                <p className="text-sm text-gray-600">{step.description}</p>
              </div>
            ))}
          </div>
        </div>
        <div className="text-center">
          <Link
            href="/auth"
            className="px-6 py-3 bg-gradient-to-r from-blue-500 to-purple-500 text-white rounded-lg hover:from-blue-600 hover:to-purple-600"
          >
            Começar Agora
          </Link>
        </div>
      </div>
    </section>
  );
}
</DOCUMENT>

<DOCUMENT filename="src\components\landing\PricingSection.tsx">
// src\components\landing\PricingSection.tsx
'use client';

import Link from 'next/link';
import { Check, Star, Zap } from 'lucide-react';
import { logger } from '@/lib/logger';

const plans = [
  {
    name: 'Música Individual',
    price: 'R$ 99,90',
    description: 'Perfeito para experimentar',
    features: ['1 música personalizada', 'Entrega em 24h', 'Download ilimitado', 'Suporte por email'],
    buttonText: 'Criar Música',
    popular: false,
  },
  {
    name: 'Pacote Família',
    price: 'R$ 229,90',
    originalPrice: 'R$ 299,70',
    description: 'Mais popular entre as famílias',
    features: ['3 músicas personalizadas', 'Economia de R$ 69,80', 'Entrega em 24h cada', 'Download ilimitado', 'Suporte prioritário'],
    buttonText: 'Escolher Pacote',
    popular: true,
  },
  {
    name: 'Pacote Premium',
    price: 'R$ 449,90',
    originalPrice: 'R$ 599,40',
    description: 'Máximo valor para sua família',
    features: ['6 músicas personalizadas', 'Economia de R$ 149,50', 'Entrega em 24h cada', 'Download ilimitado', 'Suporte VIP', 'Revisões gratuitas'],
    buttonText: 'Escolher Premium',
    popular: false,
  },
];

export function PricingSection() {
  const handlePricingClick = (plan: string) => {
    logger.info('Pricing plan clicked', { plan });
  };

  return (
    <section id="precos" className="py-20 px-4">
      <div className="container mx-auto max-w-6xl">
        <div className="text-center mb-16">
          <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
            Escolha seu plano
          </h2>
          <p className="text-lg text-gray-600 max-w-2xl mx-auto">
            Pacotes especiais com desconto progressivo. Quanto mais músicas, maior a economia!
          </p>
        </div>
        <div className="grid md:grid-cols-3 gap-8">
          {plans.map((plan, index) => (
            <div
              key={index}
              className={`relative p-8 bg-white rounded-lg shadow ${plan.popular ? 'border-blue-500 scale-105' : 'border-gray-100 hover:shadow-lg'} border`}
            >
              {plan.popular && (
                <div className="absolute -top-3 left-1/2 transform -translate-x-1/2 bg-gradient-to-r from-blue-500 to-purple-500 text-white px-3 py-1 rounded-full text-sm">
                  <Star className="w-3 h-3 mr-1 inline" />
                  Mais Popular
                </div>
              )}
              <div className="text-center mb-6">
                <h3 className="text-xl font-semibold text-gray-900 mb-2">{plan.name}</h3>
                <p className="text-sm text-gray-600 mb-4">{plan.description}</p>
                <div className="mb-4">
                  {plan.originalPrice && (
                    <div className="text-sm text-gray-500 line-through mb-1">{plan.originalPrice}</div>
                  )}
                  <div className="text-3xl font-bold text-gray-900">{plan.price}</div>
                  {index > 0 && (
                    <div className="text-sm text-green-500 font-medium mt-1">
                      <Zap className="w-3 h-3 inline mr-1" />
                      Economia garantida!
                    </div>
                  )}
                </div>
              </div>
              <ul className="space-y-3 mb-8">
                {plan.features.map((feature, featureIndex) => (
                  <li key={featureIndex} className="flex items-center gap-3">
                    <Check className="w-4 h-4 text-green-500" />
                    <span className="text-sm text-gray-600">{feature}</span>
                  </li>
                ))}
              </ul>
              <Link
                href="/auth"
                onClick={() => handlePricingClick(plan.name)}
                className="block w-full px-6 py-3 bg-gradient-to-r from-blue-500 to-purple-500 text-white rounded-lg hover:from-blue-600 hover:to-purple-600"
              >
                {plan.buttonText}
              </Link>
            </div>
          ))}
        </div>
        <div className="text-center mt-12">
          <p className="text-sm text-gray-600">
            💳 Pagamento 100% seguro via Stripe • 🔒 Garantia de satisfação • 📱 Acesso vitalício
          </p>
        </div>
      </div>
    </section>
  );
}
</DOCUMENT>

<DOCUMENT filename="src\lib\auth.ts">
// src\lib\auth.ts
import { supabase } from '@/lib/supabase/client';
import { logger } from '@/lib/logger';
import type { User } from '@supabase/supabase-js';

interface AuthResponse {
  user: User | null;
  error: string | null;
}

interface OAuthResponse {
  error: string | null;
}

export async function signUp(email: string, password: string, name?: string): Promise<AuthResponse> {
  try {
    const { data, error } = await supabase.auth.signUp({
      email,
      password,
      options: {
        data: { name, isAdmin: false },
      },
    });

    if (error) {
      logger.error('SignUp error', { email, error: error.message });
      return { user: null, error: error.message };
    }

    logger.info('User signed up successfully', { email });
    return { user: data.user, error: null };
  } catch (err) {
    logger.error('Unexpected signup error', { error: String(err) });
    return { user: null, error: 'Unexpected error during signup' };
  }
}

export async function signIn(email: string, password: string): Promise<AuthResponse> {
  try {
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password,
    });

    if (error) {
      logger.error('SignIn error', { email, error: error.message });
      return { user: null, error: error.message };
    }

    logger.info('User signed in successfully', { email });
    return { user: data.user, error: null };
  } catch (err) {
    logger.error('Unexpected signin error', { error: String(err) });
    return { user: null, error: 'Unexpected error during signin' };
  }
}

export async function signInWithGoogle(): Promise<OAuthResponse> {
  try {
    const { error } = await supabase.auth.signInWithOAuth({
      provider: 'google',
      options: {
        redirectTo: `${window.location.origin}/auth/callback`,
      },
    });

    if (error) {
      logger.error('Google OAuth error', { error: error.message });
      return { error: error.message };
    }

    logger.info('Google OAuth initiated');
    return { error: null };
  } catch (err) {
    logger.error('Unexpected Google OAuth error', { error: String(err) });
    return { error: 'Unexpected error during Google sign-in' };
  }
}

export async function signOut(): Promise<{ error: string | null }> {
  try {
    const { error } = await supabase.auth.signOut();
    if (error) {
      logger.error('SignOut error', { error: error.message });
      return { error: error.message };
    }

    logger.info('User signed out successfully');
    return { error: null };
  } catch (err) {
    logger.error('Unexpected signout error', { error: String(err) });
    return { error: 'Unexpected error during signout' };
  }
}
</DOCUMENT>

<DOCUMENT filename="src\lib\logger.ts">
// src\lib\logger.ts
export const logger = {
  info: (message: string, metadata: Record<string, unknown> = {}) => {
    console.log(`[INFO] ${message}`, metadata);
  },
  error: (message: string, metadata: Record<string, unknown> = {}) => {
    console.error(`[ERROR] ${message}`, metadata);
  },
};

</DOCUMENT>

<DOCUMENT filename="src\lib\supabase\client.ts">
// src\lib\supabase\client.ts
import { createClient } from '@supabase/supabase-js';
import { Database } from '@/types/supabase';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;

export const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
  },
});
</DOCUMENT>

<DOCUMENT filename="src\lib\utils.ts">
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

</DOCUMENT>

<DOCUMENT filename="src\lib\utils\cn.ts">
// src\lib\utils\cn.ts
import { clsx, type ClassValue } from 'clsx';
import { twMerge } from 'tailwind-merge';

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}
</DOCUMENT>

<DOCUMENT filename="src\lib\utils\useIsMobile.ts">
// src\lib\utils\useIsMobile.ts
'use client';

import * as React from 'react';

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined);
  React.useEffect(() => {
    const mql = window.matchMedia('(max-width: 767px)');
    const onChange = () => setIsMobile(window.innerWidth < 768);
    mql.addEventListener('change', onChange);
    setIsMobile(window.innerWidth < 768);
    return () => mql.removeEventListener('change', onChange);
  }, []);
  return !!isMobile;
}
</DOCUMENT>

<DOCUMENT filename="src\lib\utils\useToast.ts">
// src\lib\utils\useToast.ts
'use client';

import * as React from 'react';
import { logger } from '@/lib/logger';

interface ToastProps {
  title?: React.ReactNode;
  description?: React.ReactNode;
  open?: boolean;
  onOpenChange?: (open: boolean) => void;
}

interface ToasterToast extends ToastProps {
  id: string;
}

const TOAST_LIMIT = 1;
const TOAST_REMOVE_DELAY = 1000000;

type Action =
  | { type: 'ADD_TOAST'; toast: ToasterToast }
  | { type: 'UPDATE_TOAST'; toast: Partial<ToasterToast> }
  | { type: 'DISMISS_TOAST'; toastId?: ToasterToast['id'] }
  | { type: 'REMOVE_TOAST'; toastId?: ToasterToast['id'] };

interface State {
  toasts: ToasterToast[];
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) return;
  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId);
    dispatch({ type: 'REMOVE_TOAST', toastId });
  }, TOAST_REMOVE_DELAY);
  toastTimeouts.set(toastId, timeout);
};

const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case 'ADD_TOAST':
      logger.info('Toast added', { id: action.toast.id });
      return { ...state, toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT) };
    case 'UPDATE_TOAST':
      logger.info('Toast updated', { id: action.toast.id });
      return { ...state, toasts: state.toasts.map((t) => (t.id === action.toast.id ? { ...t, ...action.toast } : t)) };
    case 'DISMISS_TOAST': {
      const { toastId } = action;
      if (toastId) addToRemoveQueue(toastId);
      else state.toasts.forEach((toast) => addToRemoveQueue(toast.id));
      logger.info('Toast dismissed', { toastId });
      return { ...state, toasts: state.toasts.map((t) => (t.id === toastId || toastId === undefined ? { ...t, open: false } : t)) };
    }
    case 'REMOVE_TOAST':
      logger.info('Toast removed', { toastId: action.toastId });
      if (action.toastId === undefined) return { ...state, toasts: [] };
      return { ...state, toasts: state.toasts.filter((t) => t.id !== action.toastId) };
  }
};

const listeners: Array<(state: State) => void> = [];
let memoryState: State = { toasts: [] };

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action);
  listeners.forEach((listener) => listener(memoryState));
}

type Toast = Omit<ToasterToast, 'id'>;

function toast({ ...props }: Toast) {
  let count = 0; // Contador local para gerar IDs
  const id = (++count % Number.MAX_SAFE_INTEGER).toString();
  const update = (props: ToasterToast) => dispatch({ type: 'UPDATE_TOAST', toast: { ...props, id } });
  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id });
  dispatch({ type: 'ADD_TOAST', toast: { ...props, id, open: true, onOpenChange: (open) => !open && dismiss() } });
  return { id, dismiss, update };
}

export function useToast() {
  const [state, setState] = React.useState<State>(memoryState);
  React.useEffect(() => {
    listeners.push(setState);
    return () => {
      const index = listeners.indexOf(setState);
      if (index > -1) listeners.splice(index, 1);
    };
  }, [state]);
  return { ...state, toast, dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId }) };
}

export { toast };
</DOCUMENT>

<DOCUMENT filename="src\types\supabase.ts">
### ERRO AO LER ARQUIVO: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

</DOCUMENT>

<DOCUMENT filename="tailwind.config.ts">
module.exports = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      fontFamily: {
        comic: ['"Comic Neue"', 'sans-serif'],
      },
      colors: {
        foreground: '#1a202c',
        'muted-foreground': '#4a5568',
        background: '#ffffff',
        primary: { DEFAULT: '#3b82f6', foreground: '#ffffff' },
        secondary: { DEFAULT: '#ed64a6', foreground: '#ffffff' },
        accent: '#9f7aea',
        success: '#48bb78',
        'gradient-primary': 'linear-gradient(to right, #3b82f6, #9f7aea)',
        'gradient-secondary': 'linear-gradient(to right, #ed64a6, #c7f9ff)',
        'gradient-hero': 'linear-gradient(to bottom right, #e6fffa, #f9e2af)',
        'gradient-soft': 'linear-gradient(to bottom, #e6fffa, #f9e2af)',
      },
      boxShadow: {
        soft: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',
        medium: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',
        strong: '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)',
        colored: '0 0 15px rgba(59, 130, 246, 0.5)',
      },
      transitionProperty: {
        smooth: 'all 0.3s ease-in-out',
      },
    },
  },
  plugins: [],
};
</DOCUMENT>

<DOCUMENT filename="tsconfig.json">
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "nodenext",
    "moduleResolution": "nodenext",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "src/*"
      ]
    },
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": [
    "**/*.ts",
    "**/*.tsx",
    "next-env.d.ts",
    ".next/types/**/*.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}

</DOCUMENT>

